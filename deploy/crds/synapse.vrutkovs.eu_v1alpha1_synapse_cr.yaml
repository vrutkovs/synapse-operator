apiVersion: synapse.vrutkovs.eu/v1alpha1
kind: Synapse
metadata:
  name: example-synapse
spec:
  image: docker.io/ananace/matrix-synapse:1.12.4
  serverName: matrix.vrutkovs.eu
  configuration:
    homeserver: |
      # vim:ft=yaml
      # PEM encoded X509 certificate for TLS.
      # You can replace the self-signed certificate that synapse
      # autogenerates on launch with your own SSL certificate + key pair
      # if you like.  Any required intermediary certificates can be
      # appended after the primary certificate in hierarchical order.
      tls_certificate_path: "/synapse/tls/tls.crt"

      # PEM encoded private key for TLS
      tls_private_key_path: "/synapse/tls/tls.key"

      # PEM dh parameters for ephemeral keys
      tls_dh_params_path: "/synapse/keys/dhparams.pem"

      # Don't bind to the https port
      no_tls: False

      # List of allowed TLS fingerprints for this server to publish along
      # with the signing keys for this server. Other matrix servers that
      # make HTTPS requests to this server will check that the TLS
      # certificates returned by this server match one of the fingerprints.
      #
      # Synapse automatically adds the fingerprint of its own certificate
      # to the list. So if federation traffic is handle directly by synapse
      # then no modification to the list is required.
      #
      # If synapse is run behind a load balancer that handles the TLS then it
      # will be necessary to add the fingerprints of the certificates used by
      # the loadbalancers to this list if they are different to the one
      # synapse is using.
      #
      # Homeservers are permitted to cache the list of TLS fingerprints
      # returned in the key responses up to the "valid_until_ts" returned in
      # key. It may be necessary to publish the fingerprints of a new
      # certificate and wait until the "valid_until_ts" of the previous key
      # responses have passed before deploying it.
      #
      # You can calculate a fingerprint from a given TLS listener via:
      # openssl s_client -connect $host:$port < /dev/null 2> /dev/null |
      #   openssl x509 -outform DER | openssl sha256 -binary | base64 | tr -d '='
      # or by checking matrix.org/federationtester/api/report?server_name=$host
      #
      tls_fingerprints: []
      # tls_fingerprints: [{"sha256": "<base64_encoded_sha256_fingerprint>"}]


      ## Server ##

      # The domain name of the server, with optional explicit port.
      # This is used by remote servers to connect to this server,
      # e.g. matrix.org, localhost:8080, etc.
      # This is also the last part of your UserID.
      server_name: "hs.example"

      # When running as a daemon, the file to store the pid in
      pid_file: /homeserver.pid

      # CPU affinity mask. Setting this restricts the CPUs on which the
      # process will be scheduled. It is represented as a bitmask, with the
      # lowest order bit corresponding to the first logical CPU and the
      # highest order bit corresponding to the last logical CPU. Not all CPUs
      # may exist on a given system but a mask may specify more CPUs than are
      # present.
      #
      # For example:
      #    0x00000001  is processor #0,
      #    0x00000003  is processors #0 and #1,
      #    0xFFFFFFFF  is all processors (#0 through #31).
      #
      # Pinning a Python process to a single CPU is desirable, because Python
      # is inherently single-threaded due to the GIL, and can suffer a
      # 30-40% slowdown due to cache blow-out and thread context switching
      # if the scheduler happens to schedule the underlying threads across
      # different cores. See
      # https://www.mirantis.com/blog/improve-performance-python-programs-restricting-single-cpu/.
      #
      # cpu_affinity: 0xFFFFFFFF

      # Whether to serve a web client from the HTTP/HTTPS root resource.
      web_client: False

      # The root directory to server for the above web client.
      # If left undefined, synapse will serve the matrix-angular-sdk web client.
      # Make sure matrix-angular-sdk is installed with pip if web_client is True
      # and web_client_location is undefined
      # web_client_location: "/path/to/web/root"

      # The public-facing base URL for the client API (not including _matrix/...)
      # public_baseurl: https://example.com:8448/

      # Set the soft limit on the number of file descriptors synapse can use
      # Zero is used to indicate synapse should set the soft limit to the
      # hard limit.
      soft_file_limit: 0

      # The GC threshold parameters to pass to `gc.set_threshold`, if defined
      # gc_thresholds: [700, 10, 10]

      # Set the limit on the returned events in the timeline in the get
      # and sync operations. The default value is -1, means no upper limit.
      # filter_timeline_limit: 5000

      # Whether room invites to users on this server should be blocked
      # (except those sent by local server admins). The default is False.
      # block_non_admin_invites: True

      # List of ports that Synapse should listen on, their purpose and their
      # configuration.
      listeners:
        # Main HTTPS listener
        # For when matrix traffic is sent directly to synapse.
        -
          # The port to listen for HTTPS requests on.
          port: 8448

          # Local addresses to listen on.
          # This will listen on all IPv4 addresses by default.
          bind_addresses:
            - '0.0.0.0'
            # Uncomment to listen on all IPv6 interfaces
            # N.B: On at least Linux this will also listen on all IPv4
            # addresses, so you will need to comment out the line above.
            # - '::'

          # This is a 'http' listener, allows us to specify 'resources'.
          type: http

          tls: true

          # Use the X-Forwarded-For (XFF) header as the client IP and not the
          # actual client IP.
          x_forwarded: false

          # List of HTTP resources to serve on this listener.
          resources:
            -
              # List of resources to host on this listener.
              names:
                - client     # The client-server APIs, both v1 and v2
                - webclient  # The bundled webclient.

              # Should synapse compress HTTP responses to clients that support it?
              # This should be disabled if running synapse behind a load balancer
              # that can do automatic compression.
              compress: true

            - names: [federation]  # Federation APIs
              compress: false

          # optional list of additional endpoints which can be loaded via
          # dynamic modules
          # additional_resources:
          #   "/_matrix/my/custom/endpoint":
          #     module: my_module.CustomRequestHandler
          #     config: {}

        # Unsecure HTTP listener,
        # For when matrix traffic passes through loadbalancer that unwraps TLS.
        - port: 8008
          tls: false
          bind_addresses: ['0.0.0.0']
          type: http

          x_forwarded: false

          resources:
            - names: [client, webclient]
              compress: true
            - names: [federation]
              compress: false

        # Turn on the twisted ssh manhole service on localhost on the given
        # port.
        # - port: 9000
        #   bind_address: 127.0.0.1
        #   type: manhole


      # Database configuration
      database:
        # The database engine name
        name: "sqlite3"
        # Arguments to pass to the engine
        args:
          # Path to the database
          database: "/homeserver.db"

      # Number of events to cache in memory.
      event_cache_size: "10K"



      # Logging verbosity level. Ignored if log_config is specified.
      verbose: 0

      # File to write logging to. Ignored if log_config is specified.
      log_file: "/homeserver.log"

      # A yaml python logging config file
      log_config: "/synapse/config/log.yaml"


      ## Ratelimiting ##

      # Number of messages a client can send per second
      rc_messages_per_second: 0.2

      # Number of message a client can send before being throttled
      rc_message_burst_count: 10.0

      # The federation window size in milliseconds
      federation_rc_window_size: 1000

      # The number of federation requests from a single server in a window
      # before the server will delay processing the request.
      federation_rc_sleep_limit: 10

      # The duration in milliseconds to delay processing events from
      # remote servers by if they go over the sleep limit.
      federation_rc_sleep_delay: 500

      # The maximum number of concurrent federation requests allowed
      # from a single server
      federation_rc_reject_limit: 50

      # The number of federation requests to concurrently process from a
      # single server
      federation_rc_concurrent: 3



      # Directory where uploaded images and attachments are stored.
      media_store_path: "/synapse/data/media"

      # A secondary directory where uploaded images and attachments are
      # stored as a backup.
      # backup_media_store_path: "/media_store"

      # Whether to wait for successful write to backup media store before
      # returning successfully.
      # synchronous_backup_media_store: false

      # Directory where in-progress uploads are stored.
      uploads_path: "/synapse/data/uploads"

      # The largest allowed upload size in bytes
      max_upload_size: "10M"

      # Maximum number of pixels that will be thumbnailed
      max_image_pixels: "32M"

      # Whether to generate new thumbnails on the fly to precisely match
      # the resolution requested by the client. If true then whenever
      # a new resolution is requested by the client the server will
      # generate a new thumbnail. If false the server will pick a thumbnail
      # from a precalculated list.
      dynamic_thumbnails: false

      # List of thumbnail to precalculate when an image is uploaded.
      thumbnail_sizes:
      - width: 32
        height: 32
        method: crop
      - width: 96
        height: 96
        method: crop
      - width: 320
        height: 240
        method: scale
      - width: 640
        height: 480
        method: scale
      - width: 800
        height: 600
        method: scale

      # Is the preview URL API enabled?  If enabled, you *must* specify
      # an explicit url_preview_ip_range_blacklist of IPs that the spider is
      # denied from accessing.
      url_preview_enabled: False

      # List of IP address CIDR ranges that the URL preview spider is denied
      # from accessing.  There are no defaults: you must explicitly
      # specify a list for URL previewing to work.  You should specify any
      # internal services in your network that you do not want synapse to try
      # to connect to, otherwise anyone in any Matrix room could cause your
      # synapse to issue arbitrary GET requests to your internal services,
      # causing serious security issues.
      #
      # url_preview_ip_range_blacklist:
      # - '127.0.0.0/8'
      # - '10.0.0.0/8'
      # - '172.16.0.0/12'
      # - '192.168.0.0/16'
      # - '100.64.0.0/10'
      # - '169.254.0.0/16'
      #
      # List of IP address CIDR ranges that the URL preview spider is allowed
      # to access even if they are specified in url_preview_ip_range_blacklist.
      # This is useful for specifying exceptions to wide-ranging blacklisted
      # target IP ranges - e.g. for enabling URL previews for a specific private
      # website only visible in your network.
      #
      # url_preview_ip_range_whitelist:
      # - '192.168.1.1'

      # Optional list of URL matches that the URL preview spider is
      # denied from accessing.  You should use url_preview_ip_range_blacklist
      # in preference to this, otherwise someone could define a public DNS
      # entry that points to a private IP address and circumvent the blacklist.
      # This is more useful if you know there is an entire shape of URL that
      # you know that will never want synapse to try to spider.
      #
      # Each list entry is a dictionary of url component attributes as returned
      # by urlparse.urlsplit as applied to the absolute form of the URL.  See
      # https://docs.python.org/2/library/urlparse.html#urlparse.urlsplit
      # The values of the dictionary are treated as an filename match pattern
      # applied to that component of URLs, unless they start with a ^ in which
      # case they are treated as a regular expression match.  If all the
      # specified component matches for a given list item succeed, the URL is
      # blacklisted.
      #
      # url_preview_url_blacklist:
      # # blacklist any URL with a username in its URI
      # - username: '*'
      #
      # # blacklist all *.google.com URLs
      # - netloc: 'google.com'
      # - netloc: '*.google.com'
      #
      # # blacklist all plain HTTP URLs
      # - scheme: 'http'
      #
      # # blacklist http(s)://www.acme.com/foo
      # - netloc: 'www.acme.com'
      #   path: '/foo'
      #
      # # blacklist any URL with a literal IPv4 address
      # - netloc: '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'

      # The largest allowed URL preview spidering size in bytes
      max_spider_size: "10M"




      ## Captcha ##
      # See docs/CAPTCHA_SETUP for full details of configuring this.

      # This Home Server's ReCAPTCHA public key.
      recaptcha_public_key: "YOUR_PUBLIC_KEY"

      # This Home Server's ReCAPTCHA private key.
      recaptcha_private_key: "YOUR_PRIVATE_KEY"

      # Enables ReCaptcha checks when registering, preventing signup
      # unless a captcha is answered. Requires a valid ReCaptcha
      # public/private key.
      enable_registration_captcha: False

      # A secret key used to bypass the captcha test entirely.
      #captcha_bypass_secret: "YOUR_SECRET_HERE"

      # The API endpoint to use for verifying m.login.recaptcha responses.
      recaptcha_siteverify_api: "https://www.google.com/recaptcha/api/siteverify"


      ## Turn ##

      # The public URIs of the TURN server to give to clients
      turn_uris: []

      # The shared secret used to compute passwords for the TURN server
      turn_shared_secret: "YOUR_SHARED_SECRET"

      # The Username and password if the TURN server needs them and
      # does not use a token
      #turn_username: "TURNSERVER_USERNAME"
      #turn_password: "TURNSERVER_PASSWORD"

      # How long generated TURN credentials last
      turn_user_lifetime: "1h"

      # Whether guests should be allowed to use the TURN server.
      # This defaults to True, otherwise VoIP will be unreliable for guests.
      # However, it does introduce a slight security risk as it allows users to
      # connect to arbitrary endpoints without having first signed up for a
      # valid account (e.g. by passing a CAPTCHA).
      turn_allow_guests: True


      ## Registration ##

      # Enable registration for new users.
      enable_registration: False

      # If set, allows registration by anyone who also has the shared
      # secret, even if registration is otherwise disabled.
      registration_shared_secret: "q.GnQs3ZrcT65o2@^3tb07Y=q.X^eZXxeag~J+mMiZVfaI8lph"

      # Set the number of bcrypt rounds used to generate password hash.
      # Larger numbers increase the work factor needed to generate the hash.
      # The default number of rounds is 12.
      bcrypt_rounds: 12

      # Allows users to register as guests without a password/email/etc, and
      # participate in rooms hosted on this server which have been made
      # accessible to anonymous users.
      allow_guest_access: False

      # The list of identity servers trusted to verify third party
      # identifiers by this server.
      trusted_third_party_id_servers:
          - matrix.org
          - vector.im
          - riot.im

      # Users who register on this homeserver will automatically be joined
      # to these rooms
      #auto_join_rooms:
      #    - "#example:example.com"


      ## Metrics ###

      # Enable collection and rendering of performance metrics
      enable_metrics: False
      report_stats: True


      ## API Configuration ##

      # A list of event types that will be included in the room_invite_state
      room_invite_state_types:
          - "m.room.join_rules"
          - "m.room.canonical_alias"
          - "m.room.avatar"
          - "m.room.name"


      # A list of application service config file to use
      app_service_config_files: []


      macaroon_secret_key: "H-aL:2+FiQxBlj43Kx;^x36eBO.~YGo6iWC3eYstmAnrDzlR~2"

      # Used to enable access token expiration.
      expire_access_token: False

      ## Signing Keys ##

      # Path to the signing key to sign messages with
      signing_key_path: "/synapse/keys/signing.key"

      # The keys that the server used to sign messages with but won't use
      # to sign new messages. E.g. it has lost its private key
      old_signing_keys: {}
      #  "ed25519:auto":
      #    # Base64 encoded public key
      #    key: "The public part of your old signing key."
      #    # Millisecond POSIX timestamp when the key expired.
      #    expired_ts: 123456789123

      # How long key response published by this server is valid for.
      # Used to set the valid_until_ts in /key/v2 APIs.
      # Determines how quickly servers will query to check which keys
      # are still valid.
      key_refresh_interval: "1d" # 1 Day.

      # The trusted servers to download signing keys from.
      perspectives:
        servers:
          "matrix.org":
            verify_keys:
              "ed25519:auto":
                key: "Noi6WqcDj0QmPxCNQqgezwTlBKrfqehY1u2FyWP9uYw"



      # Enable SAML2 for registration and login. Uses pysaml2
      # config_path:      Path to the sp_conf.py configuration file
      # idp_redirect_url: Identity provider URL which will redirect
      #                   the user back to /login/saml2 with proper info.
      # See pysaml2 docs for format of config.
      #saml2_config:
      #   enabled: true
      #   config_path: "/synapse/config/sp_conf.py"
      #   idp_redirect_url: "http://hs.example/idp"



      # Enable CAS for registration and login.
      #cas_config:
      #   enabled: true
      #   server_url: "https://cas-server.com"
      #   service_url: "https://homeserver.domain.com:8448"
      #   #required_attributes:
      #   #    name: value


      # The JWT needs to contain a globally unique "sub" (subject) claim.
      #
      # jwt_config:
      #    enabled: true
      #    secret: "a secret"
      #    algorithm: "HS256"



      # Enable password for login.
      password_config:
        enabled: true
        # Uncomment and change to a secret random string for extra security.
        # DO NOT CHANGE THIS AFTER INITIAL SETUP!
        #pepper: ""



      # Enable sending emails for notification events
      # Defining a custom URL for Riot is only needed if email notifications
      # should contain links to a self-hosted installation of Riot; when set
      # the "app_name" setting is ignored.
      #
      # If your SMTP server requires authentication, the optional smtp_user &
      # smtp_pass variables should be used
      #
      #email:
      #   enable_notifs: false
      #   smtp_host: "localhost"
      #   smtp_port: 25
      #   smtp_user: "exampleusername"
      #   smtp_pass: "examplepassword"
      #   require_transport_security: False
      #   notif_from: "Your Friendly %(app)s Home Server <noreply@example.com>"
      #   app_name: Matrix
      #   template_dir: res/templates
      #   notif_template_html: notif_mail.html
      #   notif_template_text: notif_mail.txt
      #   notif_for_new_users: True
      #   riot_base_url: "http://localhost/riot"


      # password_providers:
      #     - module: "ldap_auth_provider.LdapAuthProvider"
      #       config:
      #         enabled: true
      #         uri: "ldap://ldap.example.com:389"
      #         start_tls: true
      #         base: "ou=users,dc=example,dc=com"
      #         attributes:
      #            uid: "cn"
      #            mail: "email"
      #            name: "givenName"
      #         #bind_dn:
      #         #bind_password:
      #         #filter: "(objectClass=posixAccount)"



      # Control how push messages are sent to google/apple to notifications.
      # Normally every message said in a room with one or more people using
      # mobile devices will be posted to a push server hosted by matrix.org
      # which is registered with google and apple in order to allow push
      # notifications to be sent to these mobile devices.
      #
      # Setting redact_content to true will make the push messages contain no
      # message content which will provide increased privacy. This is a
      # temporary solution pending improvements to Android and iPhone apps
      # to get content from the app rather than the notification.
      #
      # For modern android devices the notification content will still appear
      # because it is loaded by the app. iPhone, however will send a
      # notification saying only that a message arrived and who it came from.
      #
      #push:
      #   redact_content: false


      # spam_checker:
      #     module: "my_custom_project.SuperSpamChecker"
      #     config:
      #         example_option: 'things'


      # Whether to allow non server admins to create groups on this server
      enable_group_creation: false

      # If enabled, non server admins can only create groups with local parts
      # starting with this prefix
      # group_creation_prefix: "unofficial/"

    logging: |
      version: 1
      formatters:
        precise:
        format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s- %(message)s'
      filters:
        context:
          (): synapse.util.logcontext.LoggingContextFilter
          request: ""
      handlers:
        console:
          class: logging.StreamHandler
          formatter: precise
          filters: [context]
          level: INFO
      loggers:
          synapse:
              level: INFO
      root:
          level: INFO
          handlers: [console]
  secrets:
    config:
      signingKey: "ed25519 a_TkFk QNcfQW573+ynckrQUwYUefBFVJ91sOzUzud4qCRk9KU"
      tlsCrt: |
        -----BEGIN CERTIFICATE-----
        MIICnzCCAYcCAgPoMA0GCSqGSIb3DQEBCwUAMBUxEzARBgNVBAMMCmhzLmV4YW1w
        bGUwHhcNMjAwNTE2MTcxMDI2WhcNMzAwNTE0MTcxMDI2WjAVMRMwEQYDVQQDDApo
        cy5leGFtcGxlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6KvLOFeR
        Y+ZG2YrTsZ3fhfLFVGoEBvStTe1N0/eOgPk7h84b/MCVNtuOnuYVOi1mmTLaYJB+
        Pc9FUGzdv+mJbVlEkZJLy7ipt8AAU4o0O1e+MyW/II2TrXEgAV03fEIiYKdsstCb
        BOGdHPsBRkov/VXtV2ajF78VFunZ0FvDjtGbfFUvRqGvlLfidFBzx95YZcokWFAn
        uRHAnPakyNM6zDKSPQxbPzrKCZ+5dNMb+kpNMI7+iCGpXskDXnHkC9X31xCq9OVw
        ci0w7sMK8SJJZFbcyF5Y+ROrWEpno4rYsUtwRgNRIqH719rzl5mVywSpzqeoJQFd
        VCt+qyzMeIy5dwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAclFuWxFvr2nEPnvgx
        cbEzjv32x4BbdfJ4xcgXNybN9OMdSkNm00YOTNE+f4dexlfVuVO9W/sFi/AvfwCz
        XvWFw51PELFmRDZV1K94w+z4bYsJrlEbH2kGdmlQLan4Y05ea6CmazVqBmTvWP+I
        QaP4xzl2mJYcaN9WT3R9TkSSxjaMXq/MmAdyTM4NZdrdZM71Q9rMlfFTmdzrAcSH
        f4dQbFlDFZLgr5BpYHh0VC7Ee8Mn4jCJoEzSANQIxANdMTxfowiYou7LEDvtMCgx
        bhY9kZyFwdykgt77c5dxJ+b3C7Bj0vwl984pdJsLB7FiLcpm0hG9OxgLRtIaUAuM
        HqBr
        -----END CERTIFICATE-----
      tlsKey: |
        -----BEGIN PRIVATE KEY-----
        MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDoq8s4V5Fj5kbZ
        itOxnd+F8sVUagQG9K1N7U3T946A+TuHzhv8wJU2246e5hU6LWaZMtpgkH49z0VQ
        bN2/6YltWUSRkkvLuKm3wABTijQ7V74zJb8gjZOtcSABXTd8QiJgp2yy0JsE4Z0c
        +wFGSi/9Ve1XZqMXvxUW6dnQW8OO0Zt8VS9Goa+Ut+J0UHPH3lhlyiRYUCe5EcCc
        9qTI0zrMMpI9DFs/OsoJn7l00xv6Sk0wjv6IIaleyQNeceQL1ffXEKr05XByLTDu
        wwrxIklkVtzIXlj5E6tYSmejitixS3BGA1EiofvX2vOXmZXLBKnOp6glAV1UK36r
        LMx4jLl3AgMBAAECggEBAKT+Pkwj/NwEzjUyN1B7DaklMT3dOCHenI7oOwqXQJzB
        IK/7PumLf8S5CXgw3Ni2nU0CPM3BaWRXeWXA7bdL2sKKTQ+V2N4Mg33kT9bt6IA0
        hpIqsFBbVV/nGrUc713UYCB+WZysRWG+w/VrIcpAjatupbIW/Iy4WjI3ftg8Wn8J
        Vq0l5Pi5VpSeJq/jxq6hXvZRkKlh7NWrq8m4426qEt1QCTTrnji6id1+OY5wil8Q
        6CgDlwyZclTUc/RevbjSF59rt1f+sqiPN6V7F3+Id5G1djCVEA/9U5l6WQ+yORgM
        +rPANLmKunvnlnTpqGkCuzWsHl+nhBEwc+eEtcbTyEECgYEA+RhPqx/SYE71Egpn
        RGWSGLr4G+Su+NNTI9hVy4zhQgR9/nMh5UDAq34JE2yp6aMVsGJjGnGSZOZakdLx
        smzyXrylvOoKzKOSH8flvUNiKJpAj9dqsYi9g+qcdK+oocRGxJzNzg62ZFnD09M2
        FK+IuSQ+0t9RB6GEc4swFBEVhecCgYEA7x7ubJJurFJTx0qey7Yzze4syPHpy2JG
        59RjyVbXF9cUfNikFB4t9MTamFhf4VA8XJf93hJke9FgrdjTG0qy5p7xm36ICt/W
        PNogqp0rlLr8/sl4pYyThT546SAWYuSRX9l9vH0DfMBB7D0AT9Bi9qrrg/Un4XzS
        Lf5fBzMdnfECgYEArpJ1My7oF4r+ghg8a1jr3N0cCSBp6ATinZp99lvTepr/WhaC
        SNLqtMVtwulC43TiPG2Xmu7BdGlkTBKURUHJUs/PL+iujOCOBivoPI4++smwOZ71
        LVrxxsPjxntdKZIPLrfeHG1/MjEe5xN9MV4b6fUW+l57wWdXFksT9NxMQz0CgYBF
        WnNMiiwPTtF9u+bSrsXXtHzIy2FD2/00wCUxAD7iaz9F9o+gRiCOHYpJJVipwNvA
        /1RiVHNQdinUQk74W3IH8ZGhx9EtVj6M57cRxQQe3x0ByO11FpCy1Ku88dGMXT7M
        zgfp41hflmOIYSj1/Tq20Fv+qdwnSkyriluFew3cAQKBgDM8LM04Yx3MNlCkXImQ
        E47ZXSN2wAYjt66pQIJM8D4i1cdtI7d0yMHcOJVAlnmFfZzZ+NzAn9GHKzkSAKtX
        +mcIS3hqRV3R4S0Rtp9CpWsO5i1CaTusQsCsGuxeMu4QiTMLYvQLaN11U4ynYZ31
        pruVa8V3mVNCntHsRi2qpdIi
        -----END PRIVATE KEY-----
    tls:
      cert: |
        -----BEGIN CERTIFICATE-----
        MIICnzCCAYcCAgPoMA0GCSqGSIb3DQEBCwUAMBUxEzARBgNVBAMMCmhzLmV4YW1w
        bGUwHhcNMjAwNTE2MTcxMzAwWhcNMzAwNTE0MTcxMzAwWjAVMRMwEQYDVQQDDApo
        cy5leGFtcGxlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApaFoK+zZ
        Tr0cjv9bPRIPSlZnsNaLY7e7Fvho220UJtFIBxEB2ncdZVvf1fRw58v2Gm8B2cLE
        a8Ft/4pS10inhRp7zSNEs8Gg5GHNJ8n2U17LG9JX8TxC1GJRV38WdAF03qZdqAZN
        fMPwMgC/aDUtzCIA5ZzepzHZ0ycgt/3nSpzo3bvTopDepFdrI6a3qffCFRzxNeYZ
        yIZqCPICiKl5YJqVmXUqCiweSL4o0zJGUNzZ7+jHgfpipaVjpqEu1yDEyBvM/JVA
        XhZfjBFaSQNUk4qeV1W0ta6umMSgDhlP47cLgEGG225DEQP/JFWwTLdoS2sVeFPN
        1j8+GV/2yYFV3QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCk+9NNXQT9iG528oUP
        XwZlSg6CobVTL/gGrEQitoAISjpUwKoBwETqL0PvggIUib+4GeBdQzY5+PJPQskd
        SIuT/WtFQkHhRX2N8jeq4knDFzrDExXQV0wTltq8Xb2V1fPxkLkst2rku78760ul
        qgtRHC8Irs8kBnU9XHJKpqwH3bwhPT3kuN4FPXmni9fU0L0J6fqBhaiRoUNWhLF4
        plKd5K/CXUyOKe3AeP/0mfSQoo8M47z/ALNQd8qAdtaX0h58ljzgCkEGcpfNDdn/
        FLCQ6bfpvcXDINgk1+uGBgraIyFm87fc54Crh1CDLTOdg/OLNVnefrnceisY12uP
        FvdF
        -----END CERTIFICATE-----
      key: |
        -----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCloWgr7NlOvRyO
        /1s9Eg9KVmew1otjt7sW+GjbbRQm0UgHEQHadx1lW9/V9HDny/YabwHZwsRrwW3/
        ilLXSKeFGnvNI0SzwaDkYc0nyfZTXssb0lfxPELUYlFXfxZ0AXTepl2oBk18w/Ay
        AL9oNS3MIgDlnN6nMdnTJyC3/edKnOjdu9OikN6kV2sjprep98IVHPE15hnIhmoI
        8gKIqXlgmpWZdSoKLB5IvijTMkZQ3Nnv6MeB+mKlpWOmoS7XIMTIG8z8lUBeFl+M
        EVpJA1STip5XVbS1rq6YxKAOGU/jtwuAQYbbbkMRA/8kVbBMt2hLaxV4U83WPz4Z
        X/bJgVXdAgMBAAECggEAcO8jZn/ylBuiM2auQW/k+Rz9SrifBnkqmjj61lMD4Ivm
        ftr71ohNhOUmNG6d5Y9O2StDqcWBxK95XzpjzeL+RmWOcItRtveZyt9c0XqF+Maz
        2t6LlDMwpjv7lptTJfowQ/hP99eEUkQPrSiRWm6YMY4l6moR7xKwoacWSh5X7KkD
        MCzJZi6vGZ6tSD5nGOPHr9tMrVdymQzFrri+REmUGWjE+T1h7iNdt+RabRm7slLj
        K5kQSn4Py0QMG34AKC/rYuT8Q+MHXdUxTVGJ3CcBgzspQOj9rE7Y8te4BhVVcpep
        I1EnpkcF16rEH3nvTfW2HphbBo9w8G+0N/fMfvSaCQKBgQDcdbTu1mPIkIzZq/f8
        SfJRXy3f8ru/SDLUZ8iolbaFJt01VjsBPPwhJhVmPhbJ4lMU6XiO8eeTOnOKKfOs
        LkZEQvGXAJsV8JqNud37qXt9jyciyYvnzXedIbN2M0ZTzBsiar9xs5XAgCOklm49
        q4pfwMUDa/CwbQjMiVpR09jOOwKBgQDAVOpjrMUfeI1DpC+odmG3rpKFMw4fPTME
        dolN3d4iEt7C+3oTSWG9NJzyAlU9afmCHuY2mDfIXVfesQQcIn/xTi1X+XAJIGeC
        kKhbk8IyL1b6vuULJkRl13IUVpsNARaXBKbytJyNEZbI7NqcUyp3ZLKwCKNH8VmF
        /lwf6HyyxwKBgGbKZxNZWOsiIto3KYgzfk1cgIpDpjB43GJXBaM9Mv4AcfG1hAt+
        wNw/4ohqeLum0DAW78ROnDf0b/zCtL/aT57yS6ypdqYTKizctdjqXA7eGVRJ/vaU
        wam9Fe0N2UOnDhvNA/hi0HcSCAxsq3gLrJgazIFc6buJCyo6/KbcjOETAoGBAK9N
        No4/LTSwFmHuxpmPvSVEcrwBev+yMkwBFsjoTs1T0cJ6oBvwKKvhxqM2ySa+7vJQ
        45gjScTQf4S0Z4CVWXRBw0aKTjmjVXVGEI3XsYs4ZtkJIY72BCWnJ42uGojR0xs2
        3EwfnwldXMgqSl9t1ikYmV2lod2y99wPqTxUFUSFAoGACUBkP7fGqqK3YLiNIxJ/
        TxBtGXXO+1hFy5DZeJa+4iK3oqnYgJr5rtPR8LIfNANILsPvknXoO/7zUR/d6ZnG
        tcrO9LSlzOZolYK81V29cozf715QRtJFylUNuzZzy6b9bbPBr1yYQzDn01tGa1wk
        neVXXMiEBz3yL2xRpWlxcS4=
        -----END PRIVATE KEY-----
    keys:
      dhParams: |
        2048-bit DH parameters taken from rfc3526
        -----BEGIN DH PARAMETERS-----
        MIIBCAKCAQEA///////////JD9qiIWjCNMTGYouA3BzRKQJOCIpnzHQCC76mOxOb
        IlFKCHmONATd75UZs806QxswKwpt8l8UN0/hNW1tUcJF5IW1dmJefsb0TELppjft
        awv/XLb0Brft7jhr+1qJn6WunyQRfEsf5kkoZlHs5Fs9wgB8uKFjvwWY2kg2HFXT
        mmkWP6j9JM9fg2VdI9yjrZYcYvNWIIVSu57VKQdwlpZtZww1Tkq8mATxdGwIyhgh
        fDKQXkYuNs474553LBgOhgObJ4Oi7Aeij7XFXfBvTFLJ3ivL9pVYFxg5lUl86pVq
        5RXSJhiY+gUQFXKOWoqsqmj//////////wIBAg==
        -----END DH PARAMETERS-----
      signingKey: "ed25519 a_xxGM lIEH+RnSC5W80RoPQZPsjguFxxMs58pC5bsjbTJAB0w"
